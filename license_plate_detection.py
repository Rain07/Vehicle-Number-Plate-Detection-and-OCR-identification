# -*- coding: utf-8 -*-
"""License Plate Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ItIIil0G8Aj3athf9Mhn_fpy0CPIbK0a

# Import Libraries
- cv2 is opencv library which stands for open source computer vision. Opecv is a collection os algorithms which are used for computer vision.
- numpy is stands for Numerical Python. It is useful library for scitific calcualtion in python. It has multidimentional array object and lots of usefull methods for calculations.
- matplotlib.pyplot is used for ploting images.
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

"""# Download Dataset
- Data set for this project is downloaded from server
- unzip the download .zip file to get the .json file from it
"""

#download dataset zip file
!wget -O dataset.zip https://cc-uploads.s3.amazonaws.com/open_links/HumAIn+2019/vehicle-number-plate-detection+Datasets.zip

    
# #unzip the downloaded zip file    
!unzip dataset.zip

"""# Load data from dataset json file 
- Dataset Indian_Number_plates.json is consisting of nested json object. So I am using pandas json_normalize method to make a dataframe as your requirement
"""

import json
from pandas.io.json import json_normalize

data = list()
with open('Indian_Number_plates.json') as data_file:
    for line in data_file:
        data.append(json.loads(line))

df = json_normalize(data=data,record_path=['annotation'],meta=['content'])

print(df.shape)
df.head()

"""# Download images from url and store it into the test_images directory
- By using the dataframe 'content' columns url, I am downloading the images from server and store them inside the 'test_images' directory with sequential filename
- Filenames are stored inside a list named image_list
"""

#install scikit image
!pip install scikit-image

from skimage import io

!mkdir -p test_images

image_list =list()
for i in range(df.shape[0]):
    file_name = "image"+str(i)+".jpg"
    file_path = "test_images/"+file_name
    url =  df['content'][i]
    image_list.append(file_name)
    img = io.imread(url)
    cv2.imwrite(file_path,img)

"""# Add downloaded image list to the dataframe
- the image filename list is inserted to the dataframe
"""

df.insert(0,"imageName",image_list)
df.head()

"""# OCR of the license plates
- pytesseract library in python is used for ocr detection here.
- from dataset we get the normalised quadinate of the license plate
- using height and width of the dataset, I calculate the actual points
- cropped image is generated using this corner point
- then this cropped images is gives to the input of the image_to_string method fo pytesseract library
- All the license plate detected result is stored into the license_plates list
- This detected result is them added to dataframe corrosponding to the image
"""

## install tesseract 
!sudo apt-get install tesseract-ocr
!pip install pytesseract

import pytesseract

license_plates = list()
for i in range(df.shape[0]):
    
    width = df['imageWidth'][i]
    height = df['imageHeight'][i]
    x1 = int(df['points'][i][0]['x']*width)
    y1 = int(df['points'][i][0]['y']*height)
    x2 = int(df['points'][i][1]['x']*width)
    y2 = int(df['points'][i][1]['y']*height)
    
    img = cv2.imread("test_images/"+df['imageName'][i],0)
    cropped_img = img[y1:y2,x1:x2]
    
    license_plate_number =  pytesseract.image_to_string(cropped_img)
    license_plate_number = "".join([i for i in license_plate_number if i==' ' or i.isalnum()])
    license_plates.append(license_plate_number)
    
df.insert(0,"license_plate_number",license_plates)
df[df['license_plate_number'].str.len() > 7].head()

"""# Finally the result is stored into .csv file"""

df.to_csv("result.csv")

"""# Referances
- https://pypi.org/project/pytesseract/
- https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_setup/py_intro/py_intro.html
- https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.io.json.json_normalize.html
- https://scikit-image.org/docs/dev/api/skimage.io.html
"""

